// <auto-generated />
using System;
using DiamondDrillingReport.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DiamondDrillingReport.Migrations
{
    [DbContext(typeof(DiamondDrillingReportContext))]
    [Migration("20190129040017_holeStatus")]
    partial class holeStatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DiamondDrillingReport.Models.CreateDailyReport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AwaitingDozerDay");

                    b.Property<double>("AwaitingDozerNight");

                    b.Property<double>("AwaitingDrillCrewDay");

                    b.Property<double>("AwaitingDrillCrewNight");

                    b.Property<double>("AwaitingMechanicElectricianDay");

                    b.Property<double>("AwaitingMechanicElectricianNight");

                    b.Property<double>("AwaitingPartsMaterialsDay");

                    b.Property<double>("AwaitingPartsMaterialsNight");

                    b.Property<double>("BitChangeDay");

                    b.Property<double>("BitChangeNight");

                    b.Property<string>("BitsDay");

                    b.Property<string>("BitsNight");

                    b.Property<double>("BlastDay");

                    b.Property<double>("BlastNight");

                    b.Property<double>("CasingFromDay");

                    b.Property<double>("CasingFromNight");

                    b.Property<double>("CasingToDay");

                    b.Property<double>("CasingToNight");

                    b.Property<string>("CommentDay");

                    b.Property<string>("CommentNight");

                    b.Property<double>("ConditionDay");

                    b.Property<double>("ConditionNight");

                    b.Property<DateTime>("Date");

                    b.Property<double>("DismantlingDay");

                    b.Property<double>("DismantlingNight");

                    b.Property<double>("DrillingDay");

                    b.Property<double>("DrillingNight");

                    b.Property<double>("HoleDepthToDay");

                    b.Property<double>("HoleDepthToNight");

                    b.Property<int>("HoleID");

                    b.Property<double>("MovingRigDay");

                    b.Property<double>("MovingRigNight");

                    b.Property<double>("PreStartDay");

                    b.Property<double>("PreStartNight");

                    b.Property<double>("PreparationDrillingDay");

                    b.Property<double>("PreparationDrillingNight");

                    b.Property<double>("ReamingCasingDay");

                    b.Property<double>("ReamingCasingNight");

                    b.Property<double>("ReamingDay");

                    b.Property<double>("ReamingNight");

                    b.Property<double>("RepairsDay");

                    b.Property<double>("RepairsNight");

                    b.Property<string>("ShellDay");

                    b.Property<string>("ShellNight");

                    b.Property<double>("TestDayAZ");

                    b.Property<double>("TestDayAZ2");

                    b.Property<double>("TestDayAZ3");

                    b.Property<double>("TestDayAZ4");

                    b.Property<double>("TestDayDIP");

                    b.Property<double>("TestDayDIP2");

                    b.Property<double>("TestDayDIP3");

                    b.Property<double>("TestDayDIP4");

                    b.Property<double>("TestDayDepth");

                    b.Property<double>("TestDayDepth2");

                    b.Property<double>("TestDayDepth3");

                    b.Property<double>("TestDayDepth4");

                    b.Property<double>("TestDayMAG");

                    b.Property<double>("TestDayMAG2");

                    b.Property<double>("TestDayMAG3");

                    b.Property<double>("TestDayMAG4");

                    b.Property<double>("TestNightAZ");

                    b.Property<double>("TestNightAZ2");

                    b.Property<double>("TestNightAZ3");

                    b.Property<double>("TestNightAZ4");

                    b.Property<double>("TestNightDIP");

                    b.Property<double>("TestNightDIP2");

                    b.Property<double>("TestNightDIP3");

                    b.Property<double>("TestNightDIP4");

                    b.Property<double>("TestNightDepth");

                    b.Property<double>("TestNightDepth2");

                    b.Property<double>("TestNightDepth3");

                    b.Property<double>("TestNightDepth4");

                    b.Property<double>("TestNightMAG");

                    b.Property<double>("TestNightMAG2");

                    b.Property<double>("TestNightMAG3");

                    b.Property<double>("TestNightMAG4");

                    b.Property<double>("TestsDay");

                    b.Property<double>("TestsNight");

                    b.Property<double>("WaterDelayDay");

                    b.Property<double>("WaterDelayNight");

                    b.Property<string>("WaterTruckDay");

                    b.Property<string>("WaterTruckNight");

                    b.HasKey("ID");

                    b.HasIndex("HoleID");

                    b.ToTable("CreateDailyReport");
                });

            modelBuilder.Entity("DiamondDrillingReport.Models.Crew", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CrewName");

                    b.Property<int>("EmployeeID");

                    b.Property<int>("Helper1ID");

                    b.Property<int>("Helper2ID");

                    b.Property<int>("Helper3ID");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Crew");
                });

            modelBuilder.Entity("DiamondDrillingReport.Models.Drill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Depth");

                    b.Property<string>("DrillCode");

                    b.Property<string>("DrillColour");

                    b.Property<string>("DrillName");

                    b.Property<string>("DrillNum");

                    b.Property<string>("Modification");

                    b.HasKey("ID");

                    b.ToTable("Drill");
                });

            modelBuilder.Entity("DiamondDrillingReport.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("NameRus");

                    b.Property<int>("Position");

                    b.Property<string>("Short");

                    b.Property<string>("Surname");

                    b.HasKey("ID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DiamondDrillingReport.Models.Hole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ActualCoordinateX");

                    b.Property<double>("ActualCoordinateY");

                    b.Property<double>("ActualCoordinateZ");

                    b.Property<string>("Area")
                        .IsRequired();

                    b.Property<double>("Azimut");

                    b.Property<double>("Dip");

                    b.Property<int>("DrillID");

                    b.Property<string>("HoleCode")
                        .IsRequired();

                    b.Property<double>("HoleDepth");

                    b.Property<string>("HoleZone")
                        .IsRequired();

                    b.Property<double>("ProjectCoordinatesX");

                    b.Property<double>("ProjectCoordinatesY");

                    b.Property<double>("ProjectCoordinatesZ");

                    b.Property<double>("Section");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<string>("ZeroDatum");

                    b.HasKey("ID");

                    b.HasIndex("DrillID");

                    b.ToTable("Hole");
                });

            modelBuilder.Entity("DiamondDrillingReport.Models.CreateDailyReport", b =>
                {
                    b.HasOne("DiamondDrillingReport.Models.Hole", "Hole")
                        .WithMany("CreateDailyReports")
                        .HasForeignKey("HoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DiamondDrillingReport.Models.Crew", b =>
                {
                    b.HasOne("DiamondDrillingReport.Models.Employee", "Employee")
                        .WithMany("Crews")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DiamondDrillingReport.Models.Hole", b =>
                {
                    b.HasOne("DiamondDrillingReport.Models.Drill", "Drill")
                        .WithMany("Holes")
                        .HasForeignKey("DrillID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
